@*http://docs.telerik.com/kendo-ui/dataviz/performance-tips*@
<script>
    $(".export-pdf").click(function () {
        var chart = $("#chart").getKendoChart();
        chart.exportPDF({ paperSize: "auto", margin: { left: "1cm", top: "1cm", right: "1cm", bottom: "1cm" } }).done(function (data) {
            kendo.saveAs({
                dataURI: data,
                fileName: "chart.pdf",
                proxyURL: "@Url.Action("Export_Save", "Chart")"
            });
        });
    });

    $(".export-img").click(function () {
        var chart = $("#chart").getKendoChart();
        chart.exportImage().done(function (data) {
            kendo.saveAs({
                dataURI: data,
                fileName: "chart.png",
                proxyURL: "@Url.Action("Export_Save", "Chart")"
            });
        });
    });

    $(".export-svg").click(function () {
        
        var chart = $("#chart").getKendoChart();
        chart.exportSVG().done(function (data) {
            kendo.saveAs({
                dataURI: data,
                fileName: "chart.svg",
                proxyURL: "@Url.Action("Export_Save", "Chart")"
            });
        });
    });
</script>

<div class="box">
    <h4>Advanced Export options</h4>
    <div class="box-col">
        <button class='export-pdf k-button'>Export as PDF</button>
    </div>
    <div class="box-col">
        <button class='export-img k-button'>Export as Image</button>
    </div>
    <div class="box-col">
        <button class='export-svg k-button'>Export as SVG</button>
    </div>
</div>

@(Html.Kendo().Chart<ProcessViewModel>
      ()
      .Name("chart")
      .Title("Spain electricity production (GWh)")
            .Pdf(pdf => pdf
                .FileName("Kendo UI Chart Export.pdf")
                        .ProxyURL(Url.Action("Export_Save", "Chart"))
            )
           // .HtmlAttributes(new { style = "width:100%;height:100%" })
      .Legend(legend => legend
          .Position(ChartLegendPosition.Top)
      )
      //.RenderAs(RenderingMode.Canvas)
      .Transitions(false)
     .SeriesDefaults(sd => sd.Column().Overlay(ChartBarSeriesOverlay.None))
      .DataSource(dataSource => dataSource
          .SignalR()
          .AutoSync(true)
          .Transport(tr => tr
              .Promise("hubStart")
              .Hub("crudHub")
              .Client(c => c
                  .Read("readProcesses")
              )
              .Server(s => s
                  .Read("readProcesses")
              ))
      )
      .Series(series =>
      {
          //series.Column(model => model.PagedMemorySize64).Name("PagedMemorySize");
          //series.Column(model => model.PrivilegedProcessorTime).Name("PrivilegedProcessorTime");
          //series.Column(model => model.StartTime).Name("StartTime");
          series.Column(model => model.HandleCount).Name("HandleCount");
          series.Column(model => model.ThreadsCount).Name("ThreadsCount");
          series.Column(model => model.WorkingSet64).Name("WorkingSet MBs");

          //series.Column(model => model.SessionId).Name("SessionId");
      })
      .CategoryAxis(axis => axis
          .Categories(model => model.ProcessName)
          .Labels(labels => labels.Rotation(-90))
          .MajorGridLines(lines => lines.Visible(true))
      )
      .ValueAxis(axis => axis.Numeric()
          .Labels(labels => labels.Format("{0:N0}"))
          //.MajorUnit(10000)
          .Line(line => line.Visible(false))
      )
      .Tooltip(tooltip => tooltip
          .Visible(true)
          .Format("{0:N0}")
      )
      )

<script type="text/javascript">

    window.setInterval('$("#chart").data("kendoChart").dataSource.read();', 500);
    
</script>