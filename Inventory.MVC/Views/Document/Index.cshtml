@using Inventory.MVC.Extensions
@using Inventory.MVC.Models

<script>
    var crudHub = $.connection.crudHub;
    var hubStart = $.connection.hub.start();
</script>


@(Html.Kendo().Splitter()
      .Name("vertical")
      .Orientation(SplitterOrientation.Horizontal)
      .HtmlAttributes(new { style = "height: 800px; " })

      .Panes(verticalPanes =>
      {
          verticalPanes.Add()
              .Size("300px")
              .MinSize("100px")
              .MaxSize("600px")
              .HtmlAttributes(new { id = "top-pane" })
              .Content(
               Html.Kendo().ToolBar()
                      .Name("ToolBar")
                      .Items(items =>
                      {
                          items.Add().Type(CommandType.ButtonGroup).Buttons(buttons =>
                          {
                              buttons.Add().Text("Добави").Togglable(true).Group("text-align").SpriteCssClass("k-tool-icon k-justifyLeft");
                              buttons.Add().Text("Промени").Togglable(true).Group("text-align").SpriteCssClass("k-tool-icon k-justifyCenter");
                              buttons.Add().Text("Изтрий").Togglable(true).Group("text-align").SpriteCssClass("k-tool-icon k-justifyRight");
                          });

                      }).ToHtmlString() +

                  Html.Kendo().TreeView()
                      .Events(events => events.Change("tvSelect"))
    .Name("treeview")
              //.DataUrlField("id")
    .DataTextField("Name")
    .DataSource(dataSource => dataSource
        .Read(read => read
            .Action("GetFolders", "Document")
        )
    ).ToHtmlString()

              );

          verticalPanes.Add().Size("100%").HtmlAttributes(new { id = "right-pane" })
              .Content(

 Html.Kendo().Grid<FileViewModel>().Name("FileViewModel")
 .AddBaseOptions(DataSourceType.Ajax)

                      .DataSource(dataSource => dataSource
                                 .Ajax()




                                 .Read(read => read.Action("ReadFiles", "Document").Data("getTreeviewSelectedItem"))

                                 )
              //.Columns(columns =>
              //{
              //    columns.Bound("Id");
              //    columns.Bound("Name");
              //    columns.Bound("Size");
              //    columns.Bound("DateCreated");


           //})
              //  .Editable(e => e.DisplayDeleteConfirmation(true).Mode(GridEditMode.PopUp).Window(w => w.Title("Редакция")))
              //     .ColumnMenu(c => c.Enabled(false))
              //     .Groupable(
              //         gsb =>
              //             gsb.Enabled(true))
              //     .Pageable(
              //         pb =>
              //             pb.PageSizes(new[] { 5, 10, 100, 999 })
              //                 .Refresh(true)
              //                 .Info(true)
              //                 .Enabled(true)
              //                 .Input(true)
              //                 .ButtonCount(10)
              //     )
              //   // DateTime.Now.Ticks този код няма да сработи. Страницата просто се зарежда веднъж и повече не минава от тук колкото и да цъкаме експорт
              //     .Excel(excel => excel.AllPages(true).FileName("InventoryReport.xlsx").Filterable(true))
              //   // Не се превежда хубаво
              //   //.Pdf(pdf => pdf.FileName("InventoryReport.pdf").Date(DateTime.Now)
              //   //    .Author("InventoryAuthor").Subject("Inventory Subject Report").Title("Inventory Title").PaperSize("A3").Margin(0,0,0,0).Keywords("MVC REPORT INVENTORY"))
              //     .Sortable(ssb => ssb.AllowUnsort(true).Enabled(true).SortMode(GridSortMode.SingleColumn))
              //     .Filterable() // this is if And/Or is visible
              //     .Reorderable(r => r.Columns(true))
              //     .Resizable(resize => resize.Columns(true))

           //           .DataSource(dataSource => dataSource
              //           .Ajax()
              //           .Batch(false)

           //            .PageSize(20)
              //           .Model(m => m.Id(f => f.Id))
              //           .Read(read => read.Action("ReadFiles", "Document").Data("getTreeviewSelectedItem"))
              //           .Update( u => u.Action("UpdateFile", "Document"))
              //           )
            .ToHtmlString()


              );
      })
)

<script type="text/javascript">
    function tvSelect(e) {
        // `this` refers to the TreeView object
        var dataItem = this.dataItem(e.node);

        var grid = $("#FileViewModel").data("kendoGrid");
        grid.dataSource.read();

    }

    function getTreeviewSelectedItem() {
        debugger;
        var treeview = $("#treeview").data("kendoTreeView");
        var selected = treeview.select();
        var fullName = "";
        if (selected.length != 0) {
            fullName = treeview.dataItem(selected[0]).FullName;
        }

        return {
            folderFullPath: fullName
        }


    }
</script>